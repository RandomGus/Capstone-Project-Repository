import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Define constants for the screen width and height
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

# Set up the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Inside the Vault: Exposing Weak Links in Cybersecurity")

# Set up the font
font = pygame.font.Font(None, 74)
button_font = pygame.font.Font(None, 50)
text_font = pygame.font.Font(None, 30)

# Character data pool
name_list = ["Alice", "David", "Roxie", "Miller", "Johnson", "Martin", "Davis"]
last_name_list = ["Jackson", "Jones", "Brown", "Joe", "Wilson", "Anderson", "Smith"]
color_list = ["Purple", "Blue", "Red", "Green", "Yellow", "Pink", "Orange"]
hobby_list = ["Reading", "Swimming", "Gaming", "Hiking", "Cooking", "Painting", "Traveling"]
pet_name_list = ["Buddy", "Max", "Bella", "Luna", "Charlie", "Lucy", "Daisy"]

# Function to generate a random character
def generate_character():
    name = random.choice(name_list)
    last_name = random.choice(last_name_list)
    favorite_number = random.randint(1, 100)
    favorite_color = random.choice(color_list)
    date_of_birth = f"{random.randint(1970, 2000)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}"
    hobby = random.choice(hobby_list)
    pet_name = random.choice(pet_name_list)

    return {
        "name": name,
        "last_name": last_name,
        "favorite_number": favorite_number,
        "favorite_color": favorite_color,
        "date_of_birth": date_of_birth,
        "hobby": hobby,
        "pet_name": pet_name
    }

# Create a button class for buttons
class Button:
    def __init__(self, text, width, height, pos):
        self.rect = pygame.Rect(pos, (width, height))
        self.text = text
        self.color = GREEN
        self.text_surf = button_font.render(text, True, BLACK)
        self.text_rect = self.text_surf.get_rect(center=self.rect.center)

    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect, border_radius=12)
        screen.blit(self.text_surf, self.text_rect)

    def check_click(self):
        mouse_pos = pygame.mouse.get_pos()
        return self.rect.collidepoint(mouse_pos) and pygame.mouse.get_pressed()[0]

# Function to evaluate the player's guess
def evaluate_guess(guess, target_password):
    return guess == target_password

# Function to handle the password cracking challenge
def password_cracking_phase(character, level):
    input_password = ""
    timer = 60  # Countdown timer

    if level == 1:
        password = character["name"][0].lower() + character["last_name"][0].lower() + str(character["favorite_number"])
    elif level == 2:
        dob_parts = character["date_of_birth"].split('-')
        dob = ''.join(dob_parts[1:])  # MMDD format
        password = f"{character['name']}{character['favorite_number']}{dob}{character['favorite_color'][0].lower()}"
    else:  # Level 3
        dob_parts = character["date_of_birth"].split('-')
        dob = ''.join(dob_parts[1:])  # MMDD format
        password = f"{character['pet_name']}{character['favorite_number']}{dob}"

    clock = pygame.time.Clock()
    start_ticks = pygame.time.get_ticks()

    while True:
        seconds = (pygame.time.get_ticks() - start_ticks) / 1000
        remaining_time = timer - seconds

        if remaining_time <= 0:
            return False, password

        screen.fill(BLACK)

        # Display character information based on the level
        character_info_surf = text_font.render(f"Character: {character['name']} {character['last_name']}", True, WHITE)
        color_surf = text_font.render(f"Favorite Color: {character['favorite_color']}", True, WHITE)
        number_surf = text_font.render(f"Favorite Number: {character['favorite_number']}", True, WHITE)

        screen.blit(character_info_surf, (SCREEN_WIDTH / 2 - 200, 100))
        screen.blit(color_surf, (SCREEN_WIDTH / 2 - 150, 150))
        screen.blit(number_surf, (SCREEN_WIDTH / 2 - 150, 200))
        
        if level >= 2:
            dob_surf = text_font.render(f"Date of Birth: {character['date_of_birth']}", True, WHITE)
            screen.blit(dob_surf, (SCREEN_WIDTH / 2 - 150, 250))

        if level == 3:
            pet_surf = text_font.render(f"Pet Name: {character['pet_name']}", True, WHITE)
            screen.blit(pet_surf, (SCREEN_WIDTH / 2 - 150, 300))

        challenge_surf = text_font.render("Crack the Password:", True, WHITE)
        challenge_rect = challenge_surf.get_rect(center=(SCREEN_WIDTH / 2, 350))
        screen.blit(challenge_surf, challenge_rect)

        input_surf = text_font.render(input_password, True, GREEN)
        input_rect = input_surf.get_rect(center=(SCREEN_WIDTH / 2, 400))
        screen.blit(input_surf, input_rect)

        timer_surf = text_font.render(f"Time Left: {int(remaining_time)}", True, WHITE)
        timer_rect = timer_surf.get_rect(center=(SCREEN_WIDTH / 2, 450))
        screen.blit(timer_surf, timer_rect)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE:
                    input_password = input_password[:-1]
                elif event.key == pygame.K_RETURN:
                    if evaluate_guess(input_password, password):
                        return True, password
                    else:
                        return False, password
                else:
                    input_password += event.unicode

        pygame.display.update()
        clock.tick(60)

# Function to display success message and continue to the next level
def display_success_screen(level):
    screen.fill(BLACK)
    success_surf = text_font.render(f"Level {level} Complete!", True, GREEN)
    success_rect = success_surf.get_rect(center=(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - 50))
    continue_surf = text_font.render("Press Enter to continue to the next level", True, WHITE)
    continue_rect = continue_surf.get_rect(center=(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 + 50))

    screen.blit(success_surf, success_rect)
    screen.blit(continue_surf, continue_rect)

    pygame.display.update()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RETURN:
                    waiting = False

# Function to handle the main game loop
def game_loop():
    for level in range(1, 4):  # Levels 1, 2, and 3
        character = generate_character()  # Generate a random character for the level
        success, correct_password = password_cracking_phase(character, level)

        if success:
            display_success_screen(level)  # Show success message and wait to continue
        else:
            # Show the correct password if they fail
            screen.fill(BLACK)
            fail_surf = text_font.render("Game Over!", True, RED)
            password_surf = text_font.render(f"The correct password was: {correct_password}", True, RED)
            screen.blit(fail_surf, (SCREEN_WIDTH / 2 - 250, SCREEN_HEIGHT / 2 - 50))
            screen.blit(password_surf, (SCREEN_WIDTH / 2 - 50, SCREEN_HEIGHT / 2 + 10))
            pygame.display.update()
            pygame.time.delay(3000)  # Show for 3 seconds before quitting
            break  # End the game after failure

# Function to display the main menu
def main_menu():
    while True:
        screen.fill(WHITE)
        title_surf = font.render("Inside the Vault", True, BLACK)
        title_rect = title_surf.get_rect(center=(SCREEN_WIDTH / 2, 100))

        mission_surf = text_font.render(
            "You are a cybersecurity analyst in a corporate security team tasked", True, BLACK)
        mission_rect = mission_surf.get_rect(center=(SCREEN_WIDTH / 2, 180))

        mission_surf2 = text_font.render(
            "with identifying vulnerabilities in employee accounts. Exploit common", True, BLACK)
        mission_rect2 = mission_surf.get_rect(center=(SCREEN_WIDTH / 2, 210))

        mission_surf3 = text_font.render(
            "password vulnerabilities using personal details in OSINT.", True, BLACK)
        mission_rect3 = mission_surf.get_rect(center=(SCREEN_WIDTH / 2, 240))

        start_button = Button("Start Game", 300, 50, (SCREEN_WIDTH / 2 - 150, 400))
        exit_button = Button("Exit", 300, 50, (SCREEN_WIDTH / 2 - 150, 500))

        screen.blit(title_surf, title_rect)
        screen.blit(mission_surf, mission_rect)
        screen.blit(mission_surf2, mission_rect2)
        screen.blit(mission_surf3, mission_rect3)
        
        start_button.draw()
        exit_button.draw()

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if start_button.check_click():
                    game_loop()
                if exit_button.check_click():
                    pygame.quit()
                    sys.exit()

# Run the game
main_menu()
