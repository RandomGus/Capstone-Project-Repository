import pygame
import sys
import random

# Initialize Pygame
pygame.init()

# Screen setup
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
RED = (255, 0, 0)

screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Inside the Vault: Exposing Weak Links in Cybersecurity")

# Fonts
title_font = pygame.font.Font(None, 74)
text_font = pygame.font.Font(None, 30)
hint_font = pygame.font.Font(None, 24)  # Smaller font size for the hint text
importance_font = pygame.font.Font(None, 22)  # Smaller font for password importance

# Character data pool
name_list = ["Alice", "David", "Roxie", "Miller", "Johnson", "Martin", "Davis"]
last_name_list = ["Jackson", "Jones", "Brown", "Joe", "Wilson", "Anderson", "Smith"]

# Button Class
class Button:
    def __init__(self, text, width, height, pos):
        self.rect = pygame.Rect(pos, (width, height))
        self.text = text
        self.color = GREEN
        self.text_surf = text_font.render(text, True, BLACK)
        self.text_rect = self.text_surf.get_rect(center=self.rect.center)

    def draw(self):
        pygame.draw.rect(screen, self.color, self.rect, border_radius=12)
        screen.blit(self.text_surf, self.text_rect)

    def check_click(self):
        mouse_pos = pygame.mouse.get_pos()
        return self.rect.collidepoint(mouse_pos) and pygame.mouse.get_pressed()[0]

# Function to generate a random employee
def generate_character():
    first_name = random.choice(name_list)
    last_name = random.choice(last_name_list)
    dob = f"{random.randint(1970, 2000)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}"
    return {"first_name": first_name, "last_name": last_name, "dob": dob}

# Display the OSINT introduction
def display_intro():
    intro_text = [
        "Open Source Intelligence (OSINT) allows attackers to gather public data",
        "such as names, birth dates, and other personal information.",
        "This data can be used to guess passwords and access sensitive accounts.",
        "Your mission: Uncover how weak links in cybersecurity can be exploited.",
        "Press Enter to continue...",
    ]
    screen.fill(WHITE)
    for i, line in enumerate(intro_text):
        line_surf = text_font.render(line, True, BLACK)
        line_rect = line_surf.get_rect(center=(SCREEN_WIDTH / 2, 150 + i * 40))
        screen.blit(line_surf, line_rect)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                return  # Proceed to the next part of the game

# Level 1: Gameplay Part
def level_1_part(part_number):
    # Generate the employee for this part
    character = generate_character()
    full_name = character["first_name"] + character["last_name"]
    password = full_name + character["dob"].replace("-", "")

    input_password = ""
    timer = 60  # 60 seconds to solve
    clock = pygame.time.Clock()
    start_ticks = pygame.time.get_ticks()

    hint_button = Button("Hint", 100, 40, (SCREEN_WIDTH - 120, SCREEN_HEIGHT - 60))
    hint_box = pygame.Rect(100, SCREEN_HEIGHT - 120, SCREEN_WIDTH - 200, 60)
    hint_text = "Look closely at their name and birth details. Personal info is often the key."
    show_hint = False

    while True:
        # Timer logic
        seconds = (pygame.time.get_ticks() - start_ticks) / 1000
        remaining_time = max(timer - seconds, 0)

        if remaining_time <= 0:
            return False, password  # Time out

        screen.fill(BLACK)

        # Display employee information
        employee_texts = [
            f"Level 1, Part {part_number}",
            f"Name: {character['first_name']} {character['last_name']}",
            f"Date of Birth: {character['dob']}",
            "Guess the password:",
        ]
        for i, line in enumerate(employee_texts):
            line_surf = text_font.render(line, True, WHITE)
            line_rect = line_surf.get_rect(center=(SCREEN_WIDTH / 2, 150 + i * 40))
            screen.blit(line_surf, line_rect)

        # Display entered password
        input_surf = text_font.render(input_password, True, GREEN)
        input_rect = input_surf.get_rect(center=(SCREEN_WIDTH / 2, 400))
        screen.blit(input_surf, input_rect)

        # Display timer
        timer_surf = text_font.render(f"Time Left: {int(remaining_time)}", True, WHITE)
        timer_rect = timer_surf.get_rect(center=(SCREEN_WIDTH / 2, 500))
        screen.blit(timer_surf, timer_rect)

        # Display hint box if "Hint" is clicked
        if show_hint:
            pygame.draw.rect(screen, WHITE, hint_box)
            hint_surf = hint_font.render(hint_text, True, BLACK)
            screen.blit(hint_surf, (110, SCREEN_HEIGHT - 110))

        # Draw the Hint button
        hint_button.draw()

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_BACKSPACE:
                    input_password = input_password[:-1]
                elif event.key == pygame.K_RETURN:
                    if input_password == password:
                        return True, password  # Correct password
                    else:
                        return False, password  # Incorrect password
                else:
                    input_password += event.unicode
            if event.type == pygame.MOUSEBUTTONDOWN:
                if hint_button.check_click():
                    show_hint = not show_hint  # Toggle hint visibility

        pygame.display.update()
        clock.tick(60)

# Display success or failure
def display_result(success, correct_password, next_part=False):
    screen.fill(BLACK)
    if success:
        result_text = (
            "Correct! Press Enter to continue to the next part."
            if next_part
            else "Level 1 Complete! Press Enter to continue."
        )
    else:
        result_text = f"Game Over! Correct password was: {correct_password}"

    result_surf = text_font.render(result_text, True, GREEN if success else RED)
    result_rect = result_surf.get_rect(center=(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2))
    screen.blit(result_surf, result_rect)
    pygame.display.update()

    waiting = True
    while waiting:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                waiting = False

# Display Password Importance
def display_password_importance():
    importance_text = [
        "Why Passwords Matter:",
        "Passwords are often the first line of defense against unauthorized access.",
        "Weak or reused passwords can lead to data breaches and loss of sensitive information.",
        "Incorporating good password hygiene helps prevent cyberattacks and maintain privacy.",
        "Press Enter to continue..."
    ]
    screen.fill(WHITE)
    for i, line in enumerate(importance_text):
        line_surf = importance_font.render(line, True, BLACK)
        line_rect = line_surf.get_rect(center=(SCREEN_WIDTH / 2, 150 + i * 40))
        screen.blit(line_surf, line_rect)
    pygame.display.update()

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN:
                return  # Proceed to the next part of the game

# Main menu
def main_menu():
    while True:
        screen.fill(WHITE)
        title_surf = title_font.render("Inside the Vault", True, BLACK)
        title_rect = title_surf.get_rect(center=(SCREEN_WIDTH / 2, 100))

        start_button = Button("Start Game", 300, 50, (SCREEN_WIDTH / 2 - 150, 300))
        exit_button = Button("Exit", 300, 50, (SCREEN_WIDTH / 2 - 150, 400))

        screen.blit(title_surf, title_rect)
        start_button.draw()
        exit_button.draw()

        pygame.display.update()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if start_button.check_click():
                    display_intro()

                    # Level 1, Part 1
                    success, correct_password = level_1_part(1)
                    if success:
                        display_result(success, correct_password, next_part=True)
                        # Level 1, Part 2
                        success, correct_password = level_1_part(2)
                        display_result(success, correct_password)
                        # Password importance
                        display_password_importance()

                elif exit_button.check_click():
                    pygame.quit()
                    sys.exit()

if __name__ == "__main__":
    main_menu()
