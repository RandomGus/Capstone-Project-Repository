# This will be the file for all of the Minigames

import pygame
import sys
from pygame import mixer

# The following function will be used in order to make sure that the text stays within the shape. 
def render_text_within_shape(screen, text, font, rect, color, padding = 10):
    words = text.split()
    lines = []
    current_line = ""

    max_width = rect.width - 2 * padding

    for word in words:
        possible_new_line = current_line + word + " "
        if font.size(possible_new_line)[0] < rect.width:
            current_line = possible_new_line
        else:
            lines.append(current_line)
            current_line = word + " "
    
    lines.append(current_line)

    y_offset = 75
    for line in lines:
        if y_offset + font.get_height() > rect.height:
            break
        text_surface = font.render(line, True, (0, 0, 0))
        screen.blit(text_surface, (rect.x + padding, rect.y + y_offset))
        y_offset += font.get_height()

def minigame01(screen):
    notebook_image = pygame.image.load("Icons_or_Images/Malware_Minigame_01/notebook.png")

    # The information below will be used for the text of the game instructions. 
    instructions_title_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Bold.ttf", 25)
    instructions_body_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Regular.ttf", 20)
    instructions_title_text = instructions_title_font.render("Game Instructions", True, (0, 0, 0))
    instruction_body_text = (
        "There will be office workers that will be coming up to you regarding issues with their computer. "
        "It will be up to you in order to determine what is wrong with their computer device. "
        "You can diagnose what the problem is by looking at your notebook and making a selection from there. "
        "If you make the right choice you will gain points. Otherwise, you will lose points. "
    )

    # These are flags that will be used for certain elements of the first minigame. 
    display_game_instructions = True
    display_notebook_content = False

    running = True
    while running:


        screen.fill((255, 255, 255))

        # The FOLLOWING will be used to hold the temporary text.
        # temporary_text_font = pygame.font.Font("Source_Code_Pro/static/SourceCodePro-Regular.ttf", 50)
        # temporary_text = temporary_text_font.render("Work In Progress", True, (255, 255, 255))
        # temporary_text_coordinates = temporary_text.get_rect(center=(400, 300))
        # The temporary text ENDS here. 

        desk_rectangle = pygame.Rect(0, 450, 800, 200)
        pygame.draw.rect(screen, (127, 79, 36), desk_rectangle, 0)

        # The following bit of code will be used for the shapes used in the notebook. 
        notebook_rectangle = pygame.Rect(375, 500, 64, 64)
        answer_option_1 = pygame.Rect(250, 75, 128, 64)
        answer_option_2 = pygame.Rect(425, 75, 128, 64)
        answer_option_3 = pygame.Rect(250, 175, 128, 64)
        answer_option_4 = pygame.Rect(425, 175, 128, 64)
        answer_option_5 = pygame.Rect(250, 275, 128, 64)
        answer_option_6 = pygame.Rect(425, 275, 128, 64)
        answer_option_7 = pygame.Rect(250, 375, 128, 64)
        answer_option_8 = pygame.Rect(425, 375, 128, 64)
        answer_option_9 = pygame.Rect(350, 475, 128, 64)

        mouse_position = pygame.mouse.get_pos()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                # This will make it so that all windows quit instead of just the singular window. 
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                # print("The Mouse Button has been Clicked")
                if pygame.mouse.get_pressed()[0]:
                    # print("The Left Mouse Button has been Clicked")
                    # print(mouse_position)
                    if display_game_instructions == True:
                        # print("The Display Instructions function should be false!")
                        display_game_instructions = False
                        # print(display_game_instructions)
                    if notebook_rectangle.collidepoint(mouse_position):
                        display_notebook_content = True
                        # print("The Notebook has been clicked!")
                        # print(display_notebook_content)

        # screen.blit(temporary_text, temporary_text_coordinates)
        screen.blit(notebook_image, (375, 500))

        if display_game_instructions:
            instructions_rectangle = pygame.Rect(50, 25, 700, 550)
            pygame.draw.rect(screen, (250, 237, 205), instructions_rectangle, 0)
            screen.blit(instructions_title_text, (275, 50))
            render_text_within_shape(screen, instruction_body_text, instructions_body_font, instructions_rectangle, (0, 0, 0))
        if display_notebook_content == True:
            notebook_content_rectangle = pygame.Rect(202, 52, 400, 500)
            pygame.draw.rect(screen, (0, 0, 0), (200, 50, 404, 504), 0)
            pygame.draw.rect(screen, (255, 255, 255), notebook_content_rectangle, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_1, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_2, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_3, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_4, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_5, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_6, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_7, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_8, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_9, 0)

        pygame.display.update()

def minigame02(screen):
    pass

def minigame03(screen):
    pass