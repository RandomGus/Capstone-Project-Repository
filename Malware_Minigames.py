# This will be the file for all of the Minigames

import pygame
import sys
from pygame import mixer

# The following function will be used in order to make sure that the text stays within the shape. 
def render_text_within_shape(text, font, rect, color):
    pass

def minigame01(screen):
    notebook_image = pygame.image.load("Icons_or_Images/notebook.png")

    # The information below will be used for the text of the game instructions. 
    instructions_title_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Bold.ttf", 25)
    instructions_body_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Regular.ttf", 12)
    instructions_title_text = instructions_title_font.render("Game Instructions", True, (0, 0, 0))
    instruction_body_text = (
        "There will be office workers that will be coming up to you regarding issues with their comptuer."
        "It will be up to you in order to determine what is wrong with their computer device."
        "You can diagnose what the problem is by looking at your notebook and making a selection from there."
        "If you make the right choice you will gain points. Otherwise, you will lose points. "
    )
    # instructions_body_text = instructions_title_font.render("")

    # These are flags that will be used for certain elements of the first minigame. 
    display_game_instructions = True
    display_notebook_content = False

    running = True
    while running:


        screen.fill((255, 255, 255))

        # The FOLLOWING will be used to hold the temporary text.
        # temporary_text_font = pygame.font.Font("Source_Code_Pro/static/SourceCodePro-Regular.ttf", 50)
        # temporary_text = temporary_text_font.render("Work In Progress", True, (255, 255, 255))
        # temporary_text_coordinates = temporary_text.get_rect(center=(400, 300))
        # The temporary text ENDS here. 

        desk_rectangle = pygame.Rect(0, 450, 800, 200)
        pygame.draw.rect(screen, (127, 79, 36), desk_rectangle, 0)
        notebook_rectangle = pygame.Rect(375, 500, 64, 64)

        mouse_position = pygame.mouse.get_pos()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                # This will make it so that all windows quit instead of just the singular window. 
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                # print("The Mouse Button has been Clicked")
                if pygame.mouse.get_pressed()[0]:
                    # print("The Left Mouse Button has been Clicked")
                    # print(mouse_position)
                    if display_game_instructions == True:
                        # print("The Display Instructions function should be false!")
                        display_game_instructions = False
                        # print(display_game_instructions)
                    if notebook_rectangle.collidepoint(mouse_position):
                        display_notebook_content = True
                        # print("The Notebook has been clicked!")
                        # print(display_notebook_content)

        # screen.blit(temporary_text, temporary_text_coordinates)
        screen.blit(notebook_image, (375, 500))

        if display_game_instructions:
            instructions_rectangle = pygame.Rect(50, 25, 700, 550)
            pygame.draw.rect(screen, (250, 237, 205), instructions_rectangle, 0)
            screen.blit(instructions_title_text, (275, 50))
        if display_notebook_content == True:
            notebook_content_rectangle = pygame.Rect(202, 52, 400, 500)
            pygame.draw.rect(screen, (0, 0, 0), (200, 50, 404, 504), 0)
            pygame.draw.rect(screen, (255, 255, 255), notebook_content_rectangle, 0)

        pygame.display.update()

def minigame02(screen):
    pass

def minigame03(screen):
    pass