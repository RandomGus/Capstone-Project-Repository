# This will be the file for all of the Minigames

import pygame
import sys
import random
from pygame import mixer

# The following function will be used in order to make sure that the text stays within the shape. 
def render_text_within_shape(screen, text, font, rect, color, padding = 30):
    words = text.split()
    lines = []
    current_line = ""

    max_width = rect.width - 2 * padding

    for word in words:
        possible_new_line = current_line + word + " "
        if font.size(possible_new_line)[0] < max_width:
            current_line = possible_new_line
        else:
            lines.append(current_line)
            current_line = word + " "
    
    lines.append(current_line)

    y_offset = 50
    for line in lines:
        if y_offset + font.get_height() > rect.height:
            break
        text_surface = font.render(line, True, (0, 0, 0))
        screen.blit(text_surface, (rect.x + padding, rect.y + y_offset))
        y_offset += font.get_height()

# The following function will be used to get the question from the variable of our choosing. 
def Question_Generator(questions):
    return random.choice(questions)

# The following function will be used to check the answer that was chosen and the right answer.
def Check_Answer(player_answer, correct_answer):
    if player_answer == correct_answer:
        return True
    else:
        return False


def minigame01(screen):
    notebook_image = pygame.image.load("Icons_or_Images/Malware_Minigame_01/notebook.png")

    # The information below will be used for the text of the game instructions. 
    instructions_title_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Bold.ttf", 25)
    instructions_body_font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Regular.ttf", 20)
    instructions_title_text = instructions_title_font.render("Game Instructions", True, (0, 0, 0))
    instruction_body_text = (
        "There will be office workers that will be coming up to you regarding issues with their computer. "
        "It will be up to you in order to determine what is wrong with their computer device. "
        "You can diagnose what the problem is by looking at your notebook and making a selection from there. "
        "If you make the right choice you will gain points. Otherwise, you will lose points. "
    )

    # These are flags that will be used for certain elements of the first minigame. 
    display_game_instructions = True
    display_notebook_content = False

    # The following will be used to store the font for the questions.
    Question_Font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Regular.ttf", 15)

    # The following variable will be used to store the question and answers for the temporary code. 
    questions = [
        {"Question": "All of a sudden, I can’t access any of my files. There’s a message on my screen demanding payment in exchange for a decryption key. What could be causing this?", "Answer": "Ransomware"},
        {"Question": "I’ve noticed my computer has slowed down, and sometimes I see strange ads related to sites I visit. It feels like something’s watching me. What could this be?", "Answer": "Spyware"},
        {"Question": "Whenever I open my browser, I’m bombarded with ads and pop-ups—even on websites that shouldn’t have ads. What might be causing this?", "Answer": "Adware"},
        {"Question": "I downloaded a free program that looked helpful, but since then, strange things have been happening on my computer, like new software installing by itself. What could be the cause?", "Answer": "Trojan"},
        {"Question": "My computer and all the others on our network have suddenly started acting very slow, even though we haven’t installed anything new. Could something have spread across the network?", "Answer": "Worm"},
        {"Question": "I’m noticing unusual login attempts on my accounts, and it feels like someone’s somehow capturing my keystrokes. What type of malware could this be?", "Answer": "Keylogger"},
        {"Question": "My computer seems to be doing things on its own, like sending emails or connecting to strange websites. Could something be controlling it remotely?", "Answer": "Bot"},
        {"Question": "When I try to start my computer, it won’t load the operating system and shows a strange error message. Could something have infected the startup process?", "Answer": "Boot Sector Virus"}
    ]

    current_Question_and_Answer = Question_Generator(questions)
    correct_Answer = current_Question_and_Answer["Answer"]
    answer = None
    Game_Loop_Count = 0
    Correct_or_Not = None

    running = True
    while running:

        screen.fill((255, 255, 255))

        # The FOLLOWING will be used to hold the temporary text.
        temporary_text_font = pygame.font.Font("Source_Code_Pro/static/SourceCodePro-Regular.ttf", 50)
        temporary_text = temporary_text_font.render("Work In Progress", True, (255, 255, 255))
        temporary_text_coordinates = temporary_text.get_rect(center=(400, 300))
        # The temporary text ENDS here. 

        desk_rectangle = pygame.Rect(0, 450, 800, 200)
        pygame.draw.rect(screen, (127, 79, 36), desk_rectangle, 0)

        # The following bit of code will be used for the shapes used in the notebook. 
        notebook_rectangle = pygame.Rect(375, 500, 64, 64)
        answer_option_1 = pygame.Rect(250, 75, 128, 64)
        answer_option_2 = pygame.Rect(425, 75, 128, 64)
        answer_option_3 = pygame.Rect(250, 175, 128, 64)
        answer_option_4 = pygame.Rect(425, 175, 128, 64)
        answer_option_5 = pygame.Rect(250, 275, 128, 64)
        answer_option_6 = pygame.Rect(425, 275, 128, 64)
        answer_option_7 = pygame.Rect(250, 375, 128, 64)
        answer_option_8 = pygame.Rect(425, 375, 128, 64)
        Question_Text_Rectangle = pygame.Rect(200, 75, 400, 300)

        # The following will be used to label the buttons that are being used in the answer bank. 
        Answer_Option_Font = pygame.font.Font("Source_Code_Pro\static\SourceCodePro-Bold.ttf", 15)
        Answer_Option_Ransomware = Answer_Option_Font.render("Ransomware", True, (255, 255, 255))
        Answer_Option_Spyware = Answer_Option_Font.render("Spyware", True, (255, 255, 255))
        Answer_Option_Adware = Answer_Option_Font.render("Adware", True, (255, 255, 255))
        Answer_Option_Trojan = Answer_Option_Font.render("Trojan", True, (255, 255, 255))
        Answer_Option_Worm = Answer_Option_Font.render("Worm", True, (255, 255, 255))
        Answer_Option_Keylogger = Answer_Option_Font.render("Keylogger", True, (255, 255, 255))
        Answer_Option_Bot = Answer_Option_Font.render("Bot", True, (255, 255, 255))
        Answer_Option_BootSectorVirus_1 = Answer_Option_Font.render("Boot Sector", True, (255, 255, 255))
        Answer_Option_BootSectorVirus_2 = Answer_Option_Font.render("Virus", True, (255, 255, 255))

        mouse_position = pygame.mouse.get_pos()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                # This will make it so that all windows quit instead of just the singular window. 
                pygame.quit()
                sys.exit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                # print("The Mouse Button has been Clicked")
                if pygame.mouse.get_pressed()[0]:
                    # print("The Left Mouse Button has been Clicked")
                    # print(mouse_position)
                    if display_game_instructions == True:
                        # print("The Display Instructions function should be false!")
                        display_game_instructions = False
                        # print(display_game_instructions)
                    if notebook_rectangle.collidepoint(mouse_position):
                        display_notebook_content = True
                        # print("The Notebook has been clicked!")
                    # if not notebook_rectangle.collidepoint(mouse_position) and display_notebook_content == True:
                    #     display_notebook_content = False
                    #     print(answer)
                    #     print("The Outside of the Notebook has been clicked!")
                    if answer_option_1.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Boot Sector Virus")
                        answer = "Boot Sector Virus"
                        print(answer)
                        display_notebook_content = False
                    if answer_option_2.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Ransomware")
                        answer = "Ransomware"
                        display_notebook_content = False
                    if answer_option_3.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Spyware")
                        answer = "Spyware"
                        display_notebook_content = False
                    if answer_option_4.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Adware")
                        answer = "Adware"
                        display_notebook_content = False
                    if answer_option_5.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Trojan")
                        answer = "Trojan"
                        display_notebook_content = False
                    if answer_option_6.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Worm")
                        answer = "Worm"
                        display_notebook_content = False
                    if answer_option_7.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Keylogger")
                        answer = "Keylogger"
                        display_notebook_content = False
                    if answer_option_8.collidepoint(mouse_position) and display_notebook_content == True:
                        print("Bot")
                        answer = "Bot"
                        display_notebook_content = False
                    if answer != None:
                            Correct_or_Not = Check_Answer(answer, correct_Answer)
                            if Correct_or_Not:
                                print("Correct!")
                                print(Game_Loop_Count)
                            else:
                                print("Wrong!")
                                print(Game_Loop_Count)
                            
                            pygame.time.delay(500)
                            answer = None  
                            Correct_or_Not = None
                            current_Question_and_Answer = Question_Generator(questions)
                            correct_Answer = current_Question_and_Answer["Answer"]
                            Game_Loop_Count += 1  
                            print("Question:", current_Question_and_Answer["Question"])

        # screen.blit(temporary_text, temporary_text_coordinates)
        screen.blit(notebook_image, (375, 500))

        # The following code will be used to loop the game. 
        if not display_game_instructions:
            if Game_Loop_Count < 5:
                correct_Answer = current_Question_and_Answer["Answer"]
                pygame.draw.rect(screen, (255, 255, 255), Question_Text_Rectangle, 0)
                pygame.draw.rect(screen, (0, 0, 0), Question_Text_Rectangle, 2)
                render_text_within_shape(screen, current_Question_and_Answer["Question"], Question_Font, Question_Text_Rectangle, (0, 0, 0), padding=10)
            else:
                screen.fill(255, 255, 255)
                screen.blit(temporary_text, temporary_text_coordinates)
        if display_game_instructions:
            instructions_rectangle = pygame.Rect(50, 25, 700, 550)
            pygame.draw.rect(screen, (250, 237, 205), instructions_rectangle, 0)
            screen.blit(instructions_title_text, (275, 30))
            render_text_within_shape(screen, instruction_body_text, instructions_body_font, instructions_rectangle, (0, 0, 0))
        if display_notebook_content == True:
            notebook_content_rectangle = pygame.Rect(202, 52, 400, 500)
            pygame.draw.rect(screen, (0, 0, 0), (200, 50, 404, 504), 0)
            pygame.draw.rect(screen, (255, 255, 255), notebook_content_rectangle, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_1, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_2, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_3, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_4, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_5, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_6, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_7, 0)
            pygame.draw.rect(screen, (0, 0, 0), answer_option_8, 0)
            screen.blit(Answer_Option_Ransomware, (445, 95))
            screen.blit(Answer_Option_Spyware, (280, 195))
            screen.blit(Answer_Option_Adware, (460, 195))
            screen.blit(Answer_Option_Trojan, (285, 295))
            screen.blit(Answer_Option_Worm, (470, 295))
            screen.blit(Answer_Option_Keylogger, (275, 395))
            screen.blit(Answer_Option_Bot, (475, 395))
            screen.blit(Answer_Option_BootSectorVirus_1, (265, 85))
            screen.blit(Answer_Option_BootSectorVirus_2, (290, 105))

        pygame.display.update()

def minigame02(screen):
    pass

def minigame03(screen):
    pass